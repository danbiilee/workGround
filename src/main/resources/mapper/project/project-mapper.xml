<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="project">
	
	<!-- ########################단비############################# -->
	<resultMap type="project" id="viewProjectMemberCollectionMap">
		<id column="project_no" property="projectNo"></id>
		<result column="project_writer" property="projectWriter"></result>
		<result column="project_title" property="projectTitle"></result>
		<result column="private_yn" property="privateYn"></result>
		<result column="project_desc" property="projectDesc"></result>
		<result column="project_startdate" property="projectStartDate"></result>
		<result column="project_enddate" property="projectEndDate"></result>
		<result column="project_realenddate" property="projectRealEndDate"></result>
		<result column="project_status_code" property="projectStatusCode"></result>
		<result column="project_status_title" property="projectStatusTitle"></result>
		<result column="project_status_color" property="projectStatusColor"></result>
		<collection property="projectMemberList" ofType="member">
			<id column="member_id" property="memberId"></id>
			<result column="password" property="password"></result>
			<result column="member_name" property="memberName"></result>
			<result column="email" property="email"></result>
			<result column="phone" property="phone"></result>
			<result column="date_of_birth" property="dateOfBirth"></result>
			<result column="dept_code" property="deptCode"></result>
			<result column="dept_title" property="deptTitle"></result>
			<result column="job_code" property="jobCode"></result>
			<result column="job_title" property="jobTitle"></result>
			<result column="quit_yn" property="quitYn"></result>
			<result column="manager_id" property="managerId"></result>
			<result column="original_filename" property="originalFileName"></result>
			<result column="renamed_filename" property="renamedFileName"></result>
			<result column="manager_yn" property="managerYn"></result>
			<result column="project_quit_yn" property="projectQuitYn"></result>
		</collection>
	</resultMap>
	
	<resultMap type="work" id="workListCollectionMap">
		<id column="work_no" property="workNo"></id>
		<result column="work_title" property="workTitle"></result>
		<result column="work_desc" property="workDesc"></result>
		<result column="work_point" property="workPoint"></result>
		<result column="work_startdate" property="workStartDate"></result>
		<result column="work_enddate" property="workEndDate"></result>
		<result column="work_realenddate" property="workRealEndDate"></result>
		<result column="work_complete_yn" property="workCompleteYn"></result>
		<result column="work_tag_code" property="workTagCode"></result>
		<result column="work_tag_title" property="workTagTitle"></result>
		<result column="work_tag_color" property="workTagColor"></result>
		<result column="work_no_ref" property="workNoRef"></result>
		<collection property="workChargedMemberList" ofType="member">
			<id column="member_id" property="memberId"></id>
			<result column="password" property="password"></result>
			<result column="member_name" property="memberName"></result>
			<result column="email" property="email"></result>
			<result column="phone" property="phone"></result>
			<result column="date_of_birth" property="dateOfBirth"></result>
			<result column="dept_code" property="deptCode"></result>
			<result column="dept_title" property="deptTitle"></result>
			<result column="job_code" property="jobCode"></result>
			<result column="job_title" property="jobTitle"></result>
			<result column="quit_yn" property="quitYn"></result>
			<result column="manager_id" property="managerId"></result>
			<result column="original_filename" property="originalFileName"></result>
			<result column="renamed_filename" property="renamedFileName"></result>
			<result column="manager_yn" property="managerYn"></result>
			<result column="project_quit_yn" property="projectQuitYn"></result>
		</collection>
	</resultMap>
	
	<!-- projectList 뿌리기 : 부서 전체 프로젝트(최근 프로젝트) 조회 -->
	<select id="selectListByDept" resultMap="viewProjectMemberCollectionMap">
		select * from view_projectMember 
		where private_yn = 'N' and dept_code = #{deptCode}
		<if test="statusCode != null and statusCode !='' and statusCode != 'ALL' and statusCode != 'NONE'">
			and project_status_code = #{statusCode}
		</if>
		<if test="statusCode == 'NONE'">
		and project_status_code is null
		</if>
		order by ${sortType}
	</select>
	
	<!-- projectList 뿌리기 : 총업무수/완료된 업무수 조회 -->
	<select id="selectCntWork" resultMap="selectCntWorkMap">
		select W.work_complete_yn yn, count(*) cnt
		from (select P.project_no, WL.worklist_no
			  from project P left join worklist WL on P.project_no = WL.project_no) V 
								  join work W on V.worklist_no = W.worklist_no
		where project_no=#{projectNo}
		group by W.work_complete_yn
	</select>
	<resultMap type="hashMap" id="selectCntWorkMap">
		<result column="yn" property="yn"/>
		<result column="cnt" property="cnt"/>
	</resultMap>
	
	<!-- projectList 뿌리기 : 중요 표시된 프로젝트 번호 조회 -->
	<select id="selectImportantProjectNo" resultType="_int">
		select PI.project_no from project_important PI left join project P on PI.project_no = P.project_no where member_id=#{memberId} order by ${sortType}
	</select>
	
	<!-- projectList 뿌리기 : 내 워크패드 조회 -->
	<select id="selectMyProject" resultType="project">
		select * from view_projectMember
		where private_yn = 'Y' and project_writer = #{memberId}
	</select>
	
	<!-- projectView 뿌리기 : 프로젝트 조회 -->
	<select id="selectProjectOne" resultMap="viewProjectMemberCollectionMap">
		select * from view_projectMember where project_no = #{projectNo}
	</select>
	
	<!-- projectView 뿌리기 : 프로젝트 번호로 업무리스트 조회 -->
	<select id="selectWorklistListbyProjectNo" resultType="worklist">
		select * from worklist where project_no = #{projectNo} order by worklist_no
	</select>
	
	<!-- projectView 뿌리기 : 업무리스트 번호로 업무 리스트 조회 -->
	<select id="selectWorkListByWorklistNo" resultMap="workListCollectionMap">
		select V.*, WCM.work_charged_members_no, VM.*
		from (select * from view_workTag where worklist_no = #{worklistNo} 
         		order by work_no desc) V left join work_charged_members WCM on V.work_no = WCM.work_no
                                         left join view_member VM on WCM.charged_member_id = VM.member_id
	</select>
	
	<!-- projectView 뿌리기 : 업무번호로 체크리스트 조회 -->
	<select id="selectChklstListByWorkNo" resultMap="checklistMap">
		select C.*, WM.charged_member_id
		from checklist C left join work_charged_members WM on C.checklist_charged_members_no = WM.work_charged_members_no
		where C.work_no = #{workNo}
		order by checklist_no
	</select>
	<resultMap type="checklist" id="checklistMap">
		<result column="charged_member_id" property="checklistChargedMemberId"></result>
	</resultMap>
	
	<!-- projectView 뿌리기 : 업무번호로 첨부파일 조회 -->
	<select id="selectAttachListByWorkNo" resultMap="attachmentMap">
		select A.*, PM.member_id
		from attachment A join project_members PM on A.attachment_writer_no = PM.project_members_no
		where A.work_no = #{workNo}
		order by A.attachment_no desc
	</select>
	<resultMap type="attachment" id="attachmentMap">
		<result column="member_id" property="attachmentWriterId"></result>
	</resultMap>
	
	<!-- projectView 뿌리기 : 업무번호로 코멘트 조회 -->
	<select id="selectCommentListByWorkNo" resultMap="workCommentMap">
		select WC.*, PM.member_id
		from work_comment WC join project_members PM on WC.work_comment_writer_no = PM.project_members_no
		where WC.work_no = #{workNo}
		order by WC.work_comment_no
	</select>
	<resultMap type="workComment" id="workCommentMap">
		<result column="member_id" property="workCommentWriterId"></result>
	</resultMap>
	
	<!-- projectView 뿌리기 : 아이디로 멤버 조회 -->
	<select id="selectMemberOneByMemberId" resultType="member">
		select * from view_member where member_id = #{memberId}
	</select>
	
	<!-- projectView 뿌리기 : 업무리스트번호로 완료된 업무 수 조회 -->
	<select id="selectTotalWorkCompleteYn" resultType="_int">
		select count(*) total_work_complete_yn
		from worklist WL left join Work W on WL.worklist_no = W.worklist_no
		where WL.worklist_no = #{worklistNo} and W.work_complete_yn = 'Y'
	</select>
	
	<!-- projectView 뿌리기 : 프로젝트 중요표시 여부 조회 -->
	<select id="selectProjectImportantOne" parameterType="hashMap" resultMap="projectImportantMap">
		select PI.* 
		from project P join project_important PI on P.project_no = PI.project_no
		where P.project_no = #{projectNo} and PI.member_id = #{memberId}
	</select>
	<resultMap type="HashMap" id="projectImportantMap">
		<id column="project_important_no" property="projectImportantNo"></id>
		<id column="member_id" property="memberId"></id>
		<id column="project_no" property="projectNo"></id>
	</resultMap>
	
	<!-- projectStarCheck.do : (서브헤더 별표시 클릭시 )중요 프로젝트에 추가 -->
	<insert id="insertProjectImportant" parameterType="hashMap">
		insert into project_important values (seq_project_important.nextval, #{memberId}, #{projectNo})
	</insert>
	
	<!-- projectStarCheck.do : (서브헤더 별표시 클릭시)중요 프로젝트에서 삭제 -->
	<delete id="deleteProjectImportant">
		delete from project_important where project_important_no = #{projectImportantNo}
	</delete>
	
	<!-- addWorklist.do: 업무리스트 추가-->
	<insert id="insertWorklist" parameterType="hashMap">
		insert into worklist values(seq_worklist.nextval, #{projectNo}, #{worklistTitle})
		<selectKey keyProperty="worklistNo" resultType="_int" order="AFTER">
			select seq_worklist.currval from dual
		</selectKey>
	</insert>
	
	<!-- deleteWorklist.do: 업무리스트 삭제-->
	<delete id="deleteWorklist">
		delete from worklist where worklist_no = #{worklistNo}
	</delete>
	
	<!-- insertWork.do: 업무 추가  -->
	<insert id="insertWork">
		insert into work values(seq_work.nextval, #{worklistNo}, #{workTitle}, null, default, #{workStartDate}, #{workEndDate}, null, default, #{workTagCode}, null)
		<selectKey keyProperty="workNo" resultType="_int" order="AFTER">
			select seq_work.currval from dual
		</selectKey>
	</insert>
	
	<!-- insertWork.do: 업무 배정된 멤버 추가  -->
	<insert id="insertWorkChargedMember" parameterType="hashMap">
		insert into work_charged_members values(seq_work_charged_members.nextval, #{workNo}, #{memberId})
	</insert>
	
	<!-- insertWork.do: 업무 객체 조회 -->
	<select id="selectWorkOne" resultMap="workListCollectionMap">
		select * 
		from (select * 
         	  from (select * from view_workTag order by work_no desc) 
              where rownum = 1) V left join work_charged_members WCM on V.work_no = WCM.work_no
                             	  left join view_member VM on WCM.charged_member_id = VM.member_id
	</select>
	
	<!-- insertWork.do: 프로젝트 속한 멤버 조회 -->
	<select id="selectProjectMemberListByQuitYn" resultType="member">
		select VM.*
		from (select * from project_members 
		where project_no = 5 and project_quit_yn = 'N') V left join view_member VM on V.member_id = VM.member_id
	</select>
	
	<!-- updateChklistCompleteYn.do: 체크리스트 완료여부 업데이트 -->
	<update id="updateChklistCompleteYn" parameterType="hashMap">
		update checklist set complete_yn = #{completeYn} 
		<if test="endDate!=null">
			, checklist_enddate = to_date(#{endDate}, 'yyyy-mm-dd')
		</if>
		<if test="endDate==null">
			, checklist_enddate = null
		</if>
		where checklist_no = #{checklistNo}
	</update>
	
	<!-- searchWork.do: 업무 검색 -->
	<select id="selectWorkListBySearchKeyword" parameterType="hashMap" resultMap="workListCollectionMap">
		select V.*, WCM.work_charged_members_no, VM.*
		from (select * from view_workTag where worklist_no = #{worklistNo}
         		order by work_no desc) V left join work_charged_members WCM on V.work_no = WCM.work_no
                                         left join view_member VM on WCM.charged_member_id = VM.member_id
		where work_title like '%'||#{keyword}||'%'
	</select>
	
	<!-- deleteWork.do: 업무 삭제 -->
	<delete id="deleteWork">
		delete from work where work_no = #{workNo}
	</delete>
	
	<!-- insertWorklist.do: 업무리스트 추가후 ajax로 뿌릴 때 프로젝트 작성자 필요 -->
	<select id="selectProjectWriter" resultType="string">
		select project_writer from project where project_no = #{projectNo}
	</select>
	
	<!-- insertWork.do: 업무 추가후 ajax로 뿌릴 때 업무리스트 통채로 필요-->
	<select id="selectWorklistOne" resultType="worklist">
		select * from worklist where worklist_no = #{worklistNo}
	</select>
	
	<!-- updateWorkCompleteYn.do: 업무완료여부 업데이트 -->
	<update id="updateWorkCompleteYn" parameterType="hashMap">
		update work set work_complete_yn = #{completeYn} 
		<if test="realEndDate!=null">
			, work_realenddate = to_date(#{realEndDate}, 'yyyy-mm-dd')
		</if>
		<if test="realEndDate==null">
			, work_realenddate = null
		</if>
		where work_no = #{workNo}
	</update>
	
	<!-- deleteFile.do: 파일 삭제 -->
	<delete id="deleteFile">
		delete from attachment where attachment_no = #{attachNo}
	</delete>
	
	<!-- deleteWork.do: 참조하고 있는 체크리스트 삭제 -->
	<delete id="deleteChecklistByWorkNo">
		delete from checklist where work_no = #{workNo}
	</delete>
	
	<!-- deleteWork.do: 참조하고 있는 코멘트 삭제 -->
	<delete id="deleteCommentByWorkNo">
		delete from work_comment where work_no = #{workNo}
	</delete>
	
	<!-- deleteWork.do: 참조하고 있는 파일 삭제 -->
	<delete id="deleteAttachByWorkNo">
		delete from attachment where work_no = #{workNo}
	</delete>
	
	<delete id="deleteProject">
		delete from project where project_no = #{projectNo}
	</delete>
	
	<select id="selectProjectPrivateYn" resultType="string">
		select private_yn from project where project_no = #{projectNo}
	</select>
	
	<insert id="insertProjectLog" parameterType="hashMap">
		insert into project_log 
		values(seq_project_log.nextval, #{projectNo}, #{logType}, #{logContent}, to_date(#{logDate}, 'YYYYMMDDHH24MISS'))
	</insert>
	
	<select id="selectWorkTitle" resultType="string">
		select work_title from work where work_no = #{workNo}
	</select>
	
	<select id="selectChecklistContent" resultMap="chkContentMap">
		select work_title, checklist_content 
		from checklist C join work W on C.work_no = W.work_no 
		where C.checklist_no = #{checklistNo}
	</select>
	<resultMap type="hashMap" id="chkContentMap">
		<result column="work_title" property="workTitle"/>
		<result column="checklist_content" property="chkContent"/>
	</resultMap>
	
	<select id="selectChkChargedMemberName" resultType="string">
		select M.member_name
		from checklist C join work_charged_members WCM on C.checklist_charged_members_no = WCM.work_charged_members_no
		                join member M on WCM.charged_member_id = M.member_id
		where checklist_no = #{checklistNo}
	</select>
	
	<select id="selectMemberName" resultType="string">
		select member_name from member where member_id = #{chkChargedMemberId}
	</select>
	
	<select id="selectWorklistTitle" resultType="string">
		select worklist_title 
		from work W join worklist WL on W.worklist_no = WL.worklist_no
		where W.work_no = #{workNo}
	</select>
	
	<select id="selectWorklistTitleByWlNo" resultType="string">
		select worklist_title from worklist where worklist_no = #{worklistNo}
	</select>
	
	<update id="updateWorklistTitle" parameterType="hashMap">
		update worklist set worklist_title=#{worklistTitle} where worklist_no=#{worklistNo}
	</update>
	
	<select id="selectProjectLogList" resultMap="projectLogMap">
		select * from project_log where project_no = #{projectNo} order by log_no
	</select>	
	<resultMap type="hashMap" id="projectLogMap">
		<result column="log_no" property="logNo"/>
		<result column="project_no" property="projectNo"/>
		<result column="log_type" property="logType"/>
		<result column="log_content" property="logContent"/>
		<result column="log_date" property="logDate"/>
	</resultMap>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- ########################혜민############################# -->
	<!-- addProject.do : 프로젝트 생성 -->
	<insert id="insertProject" parameterType="project">
		insert into project
		values(seq_project.nextval,#{projectWriter},#{projectTitle},default,#{projectDesc},default,null,null,null)
		<selectKey keyProperty="projectNo" resultType="_int" order="AFTER">
			select seq_project.currval from dual
		</selectKey>
	</insert>
	
	<!-- addProject.do : 프로젝트팀원 테이블에 팀장 추가 -->
	<insert id="insertProjectManager" parameterType="project">
		insert into project_members
		values(seq_project_members.nextval,#{projectNo},#{projectWriter},'Y',default)
	</insert>
	
	<!-- addProject.do : 프로젝트팀원 테이블에 팀원 추가 -->
	<insert id="insertProjectMember">
		insert into project_members
		values(seq_project_members.nextval,to_number(#{projectNo}),#{projectMember},default,default)
	</insert>
	
	<!-- addProject.do : 프로젝트 생성 시 기본 3개 업무리스트 추가 -->
	<insert id="insertDefaultWorkList" parameterType="java.util.Map">
		insert into worklist(worklist_no,project_no,worklist_title)
		select seq_worklist.nextval, A.* from(
		<foreach item="item" collection = "worklistTitle" separator="UNION ALL " >
		select #{projectNo} as project_no, #{item} as worklist_title from dual
		</foreach>)A
	</insert>
		
	<!-- selectMemberListByDeptCode.do : memberId를 제외한 같은 부서 내 사람 조회 -->
	<select id="selectMemberListByDeptCode" resultType="member">
		select * from view_member 
		where dept_code = #{deptCode} 
		and member_id not in (${memberId}) 
		order by member_id
	</select>
	
	<!-- selectProjectMemberList : 프로젝트 팀원 리스트 -->
	<select id="selectProjectMemberList" resultMap="memberResultMap">
		select PM.manager_yn, PM.project_quit_yn, VM.* from project_members PM join view_member VM on PM.member_id = VM.member_id where PM.project_no = #{projectNo} and project_quit_yn = 'N'
	</select>
	
	<!-- projectSetting.do : 프로젝트 설정 사이드바에서 조회할 프로젝트 정보 조회 .-->
	<select id="selectProjectOneForSetting" resultMap="viewProjectMemberCollectionMap">
		select * from view_projectMember where project_no = #{projectNo} and project_quit_yn = 'N'
	</select>
	
	<!-- workSetting.do : workNo로 work조회 -->
	<select id="selectOneWorkForSetting" resultMap="workListCollectionMap">
		select V.*, WCM.work_charged_members_no, VM.*
		from view_workTag V left join work_charged_members WCM on V.work_no = WCM.work_no
                            left join view_member VM on WCM.charged_member_id = VM.member_id
		where V.work_no = #{workNo}
	</select>
	
	<!-- workSetting.do : 업무별 attachmentList조회 (작성자 멤버 객체 까지)-->
	<select id="selectAttachmentListByWorkNo" resultMap="attachmentMemberMap">
		select A.*, VM.*
		from attachment A join project_members PM on A.attachment_writer_no = PM.project_members_no left join view_member VM on PM.member_id = VM.member_id
		where A.work_no = #{workNo}
		order by attachment_enrolldate
	</select>
	<resultMap type="attachment" id="attachmentMemberMap">
		<id column="attachment_no" property="attachmentNo"></id>
		<result column="attachment_writer_no" property="attachmentWriterNo"></result>
		<result column="original_filename" property="originalFilename"></result>
		<result column="renamed_filename" property="renamedFilename"></result>
		<result column="attachment_enrolldate" property="attachmentEnrollDate"></result>
		<collection property="attachmentWriterMember" resultMap="memberResultMap"/>
	</resultMap>
	
	<!--  workSetting.do : 업무별 workCommentList조회(작성자 멤버 객체까지) =>계층형 쿼리-->
	<select id="selectWorkCommentListByWorkNo" resultMap="workCommentMemberMap">
		select WC.*, M.*
		from work_comment WC join project_members PM on WC.work_comment_writer_no = PM.project_members_no left join member M on PM.member_id = M.member_id
		where 1=1 and WC.work_no = #{workNo}
		start with work_comment_level = 1
		connect by work_comment_ref = prior work_comment_no
		order siblings by work_comment_no asc
	</select>
	<resultMap type="workComment" id="workCommentMemberMap">
		<id column="work_comment_no" property="workCommentNo"></id>
		<result column="work_comment_writer_no" property="workCommentWriterNo"></result>
		<result column="work_comment_level" property="workCommentLevel"></result>
		<result column="work_comment_content" property="workCommentContent"></result>
		<result column="work_comment_enrolldate" property="workCommentEnrollDate"></result>
		<result column="work_comment_ref" property="workCommentRef"></result>
		<collection property="workCommentWriterMember" resultMap="memberResultMap"/>
	</resultMap>
	
	<!-- updateStatusCode.do : 프로젝트 상태코드 변경 -->
	<update id="updateStatusCode">
		<if test="statusCode !='' and statusCode != null">
			update project set project_status_code = to_char(#{statusCode}) where project_no = to_number(#{projectNo})
		</if>
		<if test="statusCode =='' or statusCode == null">
			update project set project_status_code = null where project_no = to_number(#{projectNo})
		</if>
	</update>
	
	<!-- updateProjectDate.do : 프로젝트 날짜관련 수정(시작,마감,완료) -->
	<update id="updateProjectDate">
		<if test="date != null and date != ''">
		update project set ${dateType} = to_date(#{date},'YYYY/MM/DD') where project_no = to_number(#{projectNo})
		</if>
		<if test="date == null or date ==''">
		update project set ${dateType} = null where project_no = to_number(#{projectNo})
		</if>
	</update>
	
	<!-- updateProjectMember.do : 해당 projectNo의 팀원 리스트(이전에 나갔었던 사람까지 포함. 팀장 제외)-->
	<select id="selectProjectMemberIdList" resultType="member">
		select PM.member_id, PM.project_quit_yn from project_members PM left join member M on PM.member_id = M.member_id where project_no=#{projectNo} and manager_yn = 'N'
	</select>
	
	<!-- 프로젝트 멤버 project_quit_yn 수정 -->
	<update id="updateProjectQuit">
		update project_members set project_quit_yn = #{quitYN} where project_no=#{projectNo} and manager_yn = 'N'
		<if test="projectMember != '' and projectMember !=null">
			and member_id=#{projectMember}
		</if>
	</update>
	
	<!-- updateProjectManager.do : 프로젝트 관리자 수정 -->
	<update id="updateProjectManager">
		update project_members set member_id = #{updateManager} where project_no=to_number(#{projectNo}) and manager_yn = 'Y'
	</update>
	
	<!-- updateWorkMember.do : 업무 배정 멤버 추가 -->
	<insert id="insertWorkMember">
		insert into work_charged_members values(seq_work_charged_members.nextval,to_number(#{workNo}),#{memberId})
	</insert>
	
	<!-- updateWorkMember.do : 업무 배정 멤버 삭제 -->
	<insert id="deleteWorkMember">
		delete from work_charged_members where work_no=#{workNo} 
		<if test="memberId != '' and memberId != null">
			and charged_member_id=#{memberId}
		</if>
	</insert>
	
	<!-- updateWorkTag.do : 업무 태그 변경 -->
	<update id="updateWorkTag">
		<if test="workTag != null and workTag != ''">
		update work set work_tag_code= to_char(#{workTag}) where work_no = to_number(#{workNo})
		</if>
		<if test="workTag == null or workTag == ''">
		update work set work_tag_code= null where work_no = to_number(#{workNo})
		</if>
	</update>
	
	<!-- updateWorkPoint.do : 업무 포인트 변경 -->
	<update id="updateWorkPoint">
		update work set work_point = #{workPoint} where work_no=#{workNo}
	</update>
	
	<update id="updateWorkDate">
		<if test="date != null and date != ''">
		update work set ${dateType} = to_date(#{date}, 'YYYY/MM/DD') where work_no = to_number(#{workNo})
		</if>
		<if test="date == null or date ==''">
		update work set ${dateType} = null where work_no = to_number(#{workNo})
		</if>
	</update>
	
	<!-- 체크리스트 추가 -->
	<insert id="insertCheckList">
		insert into checklist values (seq_checklist.nextval, #{workNo}, #{checklistWriter},null,#{checklistContent},default,null,'N')
		<selectKey keyProperty="checklistNo" resultType="_int" order="AFTER">
			select seq_checklist.currval from dual
		</selectKey>
	</insert>
	
	<!-- insertChecklist.do : 뷰단 처리를 위한 insert한 체크리스트 객체 하나 가져오기 -->
	<select id="selectOneChecklist" resultMap="checklistMap">
		select C.*, WM.charged_member_id
		from checklist C left join work_charged_members WM on C.checklist_charged_members_no = WM.work_charged_members_no
		where C.checklist_no = #{checklistNo}
	</select>
	
	<!-- updateWorkLocation.do : 업무 이동 -->
	<update id="updateWorkLocation">
		update work set worklist_no = #{worklistNo} where work_no = #{workNo}
	</update>
	
	<!-- updateChkChargedMember.do : 체크리스트 배정 멤버 수정 -->
	<update id="updateChkChargedMember">
		update checklist 
		<if test="memberId != null and memberId != ''">
			set checklist_charged_members_no=(select work_charged_members_no from work_charged_members where charged_member_id=#{memberId} and work_no = to_number(#{workNo})) 
		</if>
		<if test="memberId == null or memberId == '' ">
			set checklist_charged_members_no = null
		</if>
		where checklist_no = to_number(#{checklistNo})
	</update>	
	
	<!-- deleteChecklist.do : 체크리스트 삭제 -->
	<delete id="deleteChecklist">
		delete from checklist where checklist_no = #{checklistNo}
	</delete>
	
	<!-- updateDesc.do : 업무, 프로젝트 설명 수정 -->
	<update id="updateDesc">
		<if test="desc != '' and desc != null">
			update ${type} set ${type}_desc= #{desc} where ${type}_no = to_number(#{no})
		</if>
		<if test="desc =='' or desc == null">
			update ${type} set ${type}_desc= null where ${type}_no = to_number(#{no})
		</if>
	</update>
	
	<!-- updateTitle.do : 업무, 프로젝트 타이틀 수정 -->
	<update id="updateTitle">
			update ${type} set ${type}_title= #{title} where ${type}_no = to_number(#{no})
	</update>
	
	<!-- insertWorkComment.do : 프로젝트 멤버 테이블 넘버 가져오기 -->
	<select id="selectProjectMemberNo" resultType="_int">
		select project_members_no from project_members where project_no=(select project_no from work w left join worklist wl on w.worklist_no = wl.worklist_no where w.work_no=to_number(#{workNo})) and member_id=#{memberId}
	</select>
	
	<!-- insertWorkComment.do : 코멘트 추가 -->
	<insert id="insertWorkComment">
	<if test="workCommentRef != null and workCommentRef !=''">
		insert into work_comment 
		values(seq_work_comment.nextval,#{workNo},#{workCommentWriterNo},#{workCommentLevel},#{workCommentContent},default,#{workCommentRef})
	</if>
	<if test="workCommentRef == null or workCommentRef ==''">
		insert into work_comment 
		values(seq_work_comment.nextval,#{workNo},#{workCommentWriterNo},#{workCommentLevel},#{workCommentContent},default,null)
	</if>
		<selectKey keyProperty="workCommentNo" resultType="_int" order="AFTER">
			select seq_work_comment.currval from dual
		</selectKey>
	</insert>
	
	<!-- deleteWorkComment.do : 코멘트 삭제 -->
	<delete id="deleteWorkComment">
		delete from work_comment where work_comment_no = #{commentNo}
	</delete>
	
	<!-- insertWorkFile.do : 업무 파일 업로드 -->
	<insert id="insertWorkFile">
		insert into attachment values (seq_attachment.nextval,#{workNo},#{attachmentWriterNo},#{originalFilename},#{renamedFilename},default)
		<selectKey keyProperty="attachmentNo" resultType="_int" order="AFTER">
			select seq_attachment.currval from dual
		</selectKey>
	</insert>
	
	<!-- insertWorkFile.do : attachment조회 -->
	<select id="selectAttachmentOne" resultMap="attachmentMemberMap">
		select A.*, VM.*
		from attachment A join project_members PM on A.attachment_writer_no = PM.project_members_no left join view_member VM on PM.member_id = VM.member_id
		where A.attachment_no = #{attachmentNo}
	</select>
	
	<select id="selectMyWorkList" resultMap="workListCollectionMap">
		select W.* 
		from worklist WL left join work W on WL.worklist_no = W.worklist_no left join work_charged_members WM on W.work_no = WM.work_no
		where project_no = to_number(#{projectNo}) and charged_member_id = #{memberId}
	</select>
	
	<select id="selectMyChecklistCnt" resultType="_int">
		select count(*) my_checklist_cnt 
		from work W right join checklist C on W.work_no = C.work_no 
		where worklist_no in (select worklist_no from worklist where project_no = to_number(#{projectNo})) and checklist_writer = #{memberId}
	</select>
	
	<select id="selectMyAttachCommentCnt" resultType="_int">
		select count(*) from work W right join ${type} A on W.work_no = A.work_no where worklist_no in (select worklist_no from worklist where project_no = to_number(#{projectNo}))
		and ${type}_writer_no = (select project_members_no from project_members where member_id=#{memberId} and project_no=to_number(#{projectNo}))
		
	</select>
	
	<update id="updateChklist">
		update checklist set checklist_content = #{chkContent} where checklist_no=to_number(#{chkNo})
	</update>
	
	<update id="updateProjectManagerYn">
		update project_members set manager_yn = #{YN} 
		where project_no = #{projectNo}
		and member_id in (
		<foreach collection="list" item="memberId" separator=",">
					'${memberId}'
		</foreach>)
	</update>
	
	<!-- insertCopyWork.do : memberId가 매니저로 존재하는 프로젝트 리스트 조회 -->
	<select id="selectMyManagingProjectList" resultType="project">
		select project_no, project_title from view_projectMember where member_id = #{memberId} and project_quit_yn = 'N' and manager_yn = 'Y' order by project_title
	</select>
	
	<!-- insertCopyWork.do : projectNo로 worklist 조회-->
	<select id="selectWorklistByProjectNo" resultType="worklist">
		select * from worklist where project_no = #{projectNo}
	</select>
	
	<!-- insertCopyWork.do : work 복사 -->
	<insert id="insertCopyWork" parameterType="work">
		insert into work values(seq_work.nextval, #{worklistNo}, #{workTitle}, #{workDesc}, #{workPoint}, #{workStartDate}, #{workEndDate}, #{workRealEndDate}, #{workCompleteYn}, #{workTagCode}, null)
		<selectKey keyProperty="workNo" resultType="_int" order="AFTER">
			select seq_work.currval from dual
		</selectKey>
	</insert>
	
	<!-- insertCopyWork.do : checklist 복사 -->
	<insert id="insertCopyChkList">
		insert into checklist(checklist_no,work_no,checklist_writer,checklist_content, checklist_startdate,checklist_enddate,complete_yn)
		select seq_checklist.nextval, A.* from(
		<foreach item="chk" collection = "list" separator="UNION ALL " >
		select #{workNo} as work_no, #{memberId} as checklist_writer, 
			   #{chk.checklistContent} as checklist_content, to_date(#{chk.checklistStartDate},'yy/MM/dd') as checklist_startdate,
			   to_date(#{chk.checklistEndDate},'yy/MM/dd') as checklist_enddate, #{chk.completeYn} as complete_yn
		from dual
		</foreach>)A
	</insert>

	<resultMap id="memberResultMap" type="member">
		<id column="member_id" property="memberId"></id>
			<result column="password" property="password"></result>
			<result column="member_name" property="memberName"></result>
			<result column="email" property="email"></result>
			<result column="phone" property="phone"></result>
			<result column="date_of_birth" property="dateOfBirth"></result>
			<result column="dept_code" property="deptCode"></result>
			<result column="dept_title" property="deptTitle"></result>
			<result column="job_code" property="jobCode"></result>
			<result column="job_title" property="jobTitle"></result>
			<result column="quit_yn" property="quitYn"></result>
			<result column="manager_id" property="managerId"></result>
			<result column="original_filename" property="originalFileName"></result>
			<result column="renamed_filename" property="renamedFileName"></result>
			<result column="manager_yn" property="managerYn"></result>
			<result column="project_quit_yn" property="projectQuitYn"></result>
	</resultMap>

</mapper>